// 마지막고침 : 2020.11.17
// win32 Visual C 2010 이상컴파일시 추가
// 프로그램 가장 첫 줄에 추가할 것
#define _CRT_SECURE_NO_WARNINGS
//-----------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>
// 택배날짜출력용
#include <time.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>


// win32 Visual C 2010 이상컴파일시 추가
#define getch() _getch()
//-----------------------------------------

/*---------------  화면 커서 위치 제어 ----------------------*/
#include < windows.h >
void gotoxy(int x, int y);
void getxy(int* x, int* y);
void clrscr(void);
/*-----------------------------------------------------------*/
void print_screen(char fname[]);
void DB_connect();
void sql_error();
//1구매
void buy_product();
void insert_counter();
void choice();
//2환불
void cancel_product();
void delete_counter();
//3 관리자
void admin_main();   // 여기서 상품추가삭제 또는 거래내역 및 자금 으로
void Insert_tuple();
void delete_tuple();
void select_tuple(); // 거래내역 및 자금
//4 택배
void percel_main();
void percel_info();
void percel_check();
void percel_print();

EXEC SQL BEGIN DECLARE SECTION;
VARCHAR uid[80];
VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

#define getch() _getch()

int x, y;
void main()
{
	_putenv("NLS_LANG=American_America.KO16KSC5601"); //한글사용

	DB_connect();

	while (1) {
		system("cls");
		/* 사용자 입력 , 메인 화면 출력*/
		char select_nu[10];
		clrscr();
		print_screen("main.pas");

		gotoxy(18, 11);
		gets(select_nu);


		if (select_nu[0] == '1') // 상품 구매로 이동
		{
			buy_product();
		}
		else if (select_nu[0] == '2') // 상품 환불로 이동
		{
			cancel_product();
		}
		else if (select_nu[0] == '3') // 관리자 모드로 이동
		{
			admin_main();
		}
		else if (select_nu[0] == '4') // 택배 모드로 이동
		{
			percel_main();
		}
	}
	EXEC SQL COMMIT WORK RELEASE;
	getch();
}
void DB_connect()
{
	strcpy((char*)uid.arr, "a20204097@//sedb.deu.ac.kr:1521/orcl");
	uid.len = (short)strlen((char*)uid.arr);
	strcpy((char*)pwd.arr, "20204097");
	pwd.len = (short)strlen((char*)pwd.arr);

	EXEC SQL CONNECT : uid IDENTIFIED BY : pwd;

	// connection이 실패했을경우의 처리부분

	if (sqlca.sqlcode != 0 && sqlca.sqlcode != -1405) {
		printf("Connect error: %s", sqlca.sqlerrm.sqlerrmc);
		getch();
		exit(-1);
	}

	printf("Oracle Connect SUCCESS by %s\n", uid.arr);
}

void buy_product()
{
	/* --------------------------------------------------------------------------
	   Retrieve the current maximum employee number
	-------------------------------------------------------------------------- */
	EXEC SQL BEGIN DECLARE SECTION;
	varchar v_code[100];
	varchar v_name[100];
	varchar v_date[100];
	varchar v_category[100];
	varchar v_price[100];
	varchar v_brand[100];
	varchar v_total[100];

	char dynstmt[1000];
	EXEC SQL END DECLARE SECTION;

	char p_name[10];
	char p_category[10];
	char p_brand[10];



	int count = 0, i;


	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

	system("cls");

	/* 사용자 입력 */
	clrscr();

	print_screen("scr_select.txt");

	gotoxy(11, 12);
	printf("[어떤것을 조회하시겠습니까? 아무것도 입력안할시 전체조회가 됩니다.]");

	gotoxy(3, 16);
	printf("상품명 ☞  ");
	gets(p_name);

	gotoxy(3, 18);
	printf("카테고리 ☞  ");
	gets(p_category);

	gotoxy(3, 20);
	printf("브랜드 ☞  ");
	gets(p_brand);

	for (int i = 14; i < 30; i++)
	{
		gotoxy(0, i);
		printf("                                                                                                     ");
	}


	/* 실행시킬 SQL 문장*/
	sprintf(dynstmt, "SELECT * FROM product  where p_name LIKE '%%%s%%' and p_category LIKE '%%%s%%' and p_brand LIKE '%%%s%%'", p_name, p_category, p_brand);

	/* select 문장이 제대로 구성되어 있는지 화면에 찍어봄 */

	EXEC SQL PREPARE S FROM : dynstmt;

	/* cursor 선언 */
	EXEC SQL DECLARE c_cursor CURSOR FOR S;

	/* cursor open */
	EXEC SQL OPEN c_cursor;

	EXEC SQL WHENEVER NOT FOUND DO break;

	x = 5;
	y = 8;

	gotoxy(x, y++);
	printf(" ");
	for (;;)
	{
		EXEC SQL FETCH c_cursor INTO : v_code, : v_name, : v_date, : v_category, : v_price, : v_brand, : v_total;

		v_code.arr[v_code.len] = '\0';
		v_name.arr[v_name.len] = '\0';
		v_date.arr[v_date.len] = '\0';
		v_category.arr[v_category.len] = '\0';
		v_price.arr[v_price.len] = '\0';
		v_brand.arr[v_brand.len] = '\0';
		v_total.arr[v_total.len] = '\0';

		gotoxy(x, y);
		printf(" | %-6s | %-10s | %-4s | %-10s | %-4s | %-10s | %-10s |", v_code.arr, v_name.arr, v_date.arr, v_category.arr, v_price.arr, v_brand.arr, v_total.arr);
		y++;

	}
	gotoxy(x, y);
	printf(" ");

	y++;
	for (int i = y; i < 30; i++)
	{
		gotoxy(0, i);
		printf("                                                                                                     ");
	}

	choice();

	/* Close the cursor. */
	EXEC SQL CLOSE c_cursor;

	EXEC SQL COMMIT;
}

void choice() {
	y += 2;
	gotoxy(11, y++);
	printf(" 1. 다시 조회하기 2. 상품구매하기 3. 뒤로가기");

	int num;
	int c;
	y++;
	gotoxy(11, y);
	printf("번호입력 ☞  ");
	scanf_s("%d", &num);

	while (c = getchar() != '\n' && c != EOF); //!!

	switch (num)
	{
	case 1:
		buy_product();
		break;
	case 2:
		insert_counter();
		break;
	default:
		break;
	}

}

void insert_counter()
{
	EXEC SQL BEGIN DECLARE SECTION;
	varchar v_code[100];
	varchar v_name[100];
	varchar v_date[100];
	varchar v_category[100];
	varchar v_price[100];
	varchar v_brand[100];
	varchar v_total[100];

	char dynstmt[1000];
	EXEC SQL END DECLARE SECTION;

	char p_code[10];
	int p_total;

	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


	y -= 3;
	for (int i = y; i < 30; i++)
	{
		gotoxy(0, i);
		printf("                                                                                                     ");
	}

	gotoxy(31, y);
	printf("[어떤 상품을 구매하시겠습니까?]");

	/* 사용자 입력 */
	y += 2;
	gotoxy(3, y);
	printf("상품코드 ☞  ");
	gets(p_code);

	y += 2;
	gotoxy(3, y);
	printf("수량 ☞  ");
	scanf_s("%d", &p_total);
	int c;
	while (c = getchar() != '\n' && c != EOF); //!!


	/* 실행시킬 SQL 문장*/
	sprintf(dynstmt, "SELECT * \
                    FROM product \
                    where p_code=%s\n", p_code);

	/* select 문장이 제대로 구성되어 있는지 화면에 찍어봄 */
	//printf("SQL:%s\n", dynstmt);

	EXEC SQL PREPARE S1 FROM : dynstmt;

	/* cursor 선언 */
	EXEC SQL DECLARE c_cursor1 CURSOR FOR S1;

	/* cursor open */
	EXEC SQL OPEN c_cursor1;
	EXEC SQL WHENEVER NOT FOUND DO break;
	for (;;)
	{

		EXEC SQL FETCH c_cursor1 INTO : v_code, : v_name, : v_date, : v_category, : v_price, : v_brand, : v_total;

		v_name.arr[v_name.len] = '\0';
		v_date.arr[v_date.len] = '\0';
		v_price.arr[v_price.len] = '\0';
		v_brand.arr[v_brand.len] = '\0';
		v_total.arr[v_total.len] = '\0';
		gotoxy(3, 28);
		printf("선택하신 상품은 [ %s ] 브랜드의 [ %s ] 입니다. 입력한 수량은 [ %d ]개 입니다.", v_brand.arr, v_name.arr, p_total);
		gotoxy(3, 29);
		printf("     총 가격은 [ %d ]원 입니다.", atoi(v_price.arr) * p_total);
		sprintf(dynstmt, "UPDATE product SET p_total = p_total - %d where p_code=%s\n", p_total, p_code);

		EXEC SQL EXECUTE IMMEDIATE : dynstmt;//반복문???
		sprintf(dynstmt, "insert into counter values ( (SELECT NVL(MAX(C_SEQ),0)+1 FROM counter), TO_DATE(sysdate, 'YY-MM-DD'), '%s', '%s', %d, '%s', %d)", p_code, v_name.arr, atoi(v_price.arr) * p_total, v_date.arr, p_total);

		printf("\n     구매가 완료되었습니다.");
		getch();

		EXEC SQL EXECUTE IMMEDIATE : dynstmt;//반복문???

		EXEC SQL COMMIT WORK;
	}
	/* Close the cursor. */
	EXEC SQL CLOSE c_cursor1;

}

void delete_counter(char no_temp1[10]) {
	EXEC SQL BEGIN DECLARE SECTION;

	char dynstmt3[1000];

	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

	while (1) {
		sprintf(dynstmt3, "delete from counter where c_seq = %s ", no_temp1);

		EXEC SQL EXECUTE IMMEDIATE : dynstmt3;
	}
	EXEC SQL COMMIT WORK;
}

void cancel_product()
{
	/* --------------------------------------------------------------------------
	   Retrieve the current maximum employee number
	-------------------------------------------------------------------------- */
	EXEC SQL BEGIN DECLARE SECTION;
	varchar p_name[100];
	varchar p_price[100];
	varchar p_date[100];
	varchar c_total[100];

	char dynstmt[1000];
	char dynstmt2[1000];

	EXEC SQL END DECLARE SECTION;

	char no_temp1[10];
	char no_temp2[10];
	char no_temp3[10];

	int x, y, count = 0, i;


	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

	system("cls");

	/* 사용자 입력 */
	clrscr();

	print_screen("check_refund.pas");

	gotoxy(20, 7);
	//printf("거래번호:");
	gets(no_temp1);




	/* 실행시킬 SQL 문장*/
	sprintf(dynstmt, "select p_name,p_price,p_date,c_total from counter where c_seq=%s", no_temp1);



	EXEC SQL PREPARE S4 FROM : dynstmt;

	/* cursor 선언 */
	EXEC SQL DECLARE c_cursor4 CURSOR FOR S4;

	/* cursor open */
	EXEC SQL OPEN c_cursor4;

	EXEC SQL WHENEVER NOT FOUND DO break;

	x = 6;
	y = 14;

	for (;;)
	{
		EXEC SQL FETCH c_cursor4 INTO : p_name, : p_price, : p_date, : c_total;

		p_name.arr[p_name.len] = '\0';
		p_price.arr[p_price.len] = '\0';
		p_date.arr[p_date.len] = '\0';
		c_total.arr[c_total.len] = '\0';
		gotoxy(x, y);
		y++;
		printf(" | %s   | %s   |  %s |  %s", p_name.arr, p_price.arr, p_date.arr, c_total.arr);

	}

	gotoxy(39, 21);
	//printf("돌아가기(0),환불진행(1):");
	gets(no_temp2);

	if (no_temp2[0] == '1' || no_temp2[0] == '\0') {
		/* 사용자 입력 */
		system("cls");
		clrscr();
		gotoxy(0, 0);
		print_screen("comple_refund.pas");
		gotoxy(30, 5);

		// 총 환불 금액 출력
		EXEC SQL BEGIN DECLARE SECTION;
		varchar refund_total[100];
		int sum = 0;
		char dynstmt2[1000];


		EXEC SQL END DECLARE SECTION;




		EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


		sprintf(dynstmt2, "select p_price from counter where c_seq=%s", no_temp1);


		EXEC SQL PREPARE T FROM : dynstmt2;

		EXEC SQL DECLARE t_cursor CURSOR FOR T;

		EXEC SQL OPEN t_cursor;


		EXEC SQL WHENEVER NOT FOUND do break;
		for (;;)
		{
			EXEC SQL FETCH t_cursor INTO : refund_total;
			sum = sum + atoi(refund_total.arr);
			refund_total.arr[refund_total.len] = '\0';

		}
		EXEC SQL CLOSE t_cursor;
		printf("%d", sum);

		delete_counter(no_temp1);
		gotoxy(35, 10);
		//printf("메인이동(0):");
		gets(no_temp3);


		if (no_temp3[0] == '0' || no_temp3[0] == '\0') {



			system("cls");
			clrscr();
			main();
		}

	}
	else {
		system("cls");
		main();
	}
	/* Close the cursor. */
	EXEC SQL CLOSE c_cursor4;

	EXEC SQL COMMIT;
}



void print_screen(char fname[])
{
	FILE* fp;
	char line[100];

	if ((fp = fopen(fname, "r")) == NULL) {
		printf("file open error\n");
		getch();
		exit(-1);
	}
	while (1)
	{
		if (fgets(line, 99, fp) == NULL) {
			break;
		}
		printf("%s", line);
	}

	fclose(fp);
}

/* --------------------------------------------------------------------------
int sql_error()

   errrpt prints the ORACLE error msg and number.
-------------------------------------------------------------------------- */
void sql_error(char* msg)
{
	char err_msg[128];
	size_t buf_len, msg_len;

	EXEC SQL WHENEVER SQLERROR CONTINUE;

	printf("\n%s\n", msg);
	buf_len = sizeof(err_msg);
	sqlglm(err_msg, &buf_len, &msg_len);
	printf("%.*s\n", msg_len, err_msg);

	getch();
	EXEC SQL ROLLBACK WORK;
	//exit(EXIT_FAILURE);
}
/*---------------  화면 커서 제어 함수 --------------------*/
#define STD_HANDLE GetStdHandle(STD_OUTPUT_HANDLE)

void gotoxy(int x, int y)
{
	COORD Cur = { (SHORT)x, (SHORT)y };

	SetConsoleCursorPosition(STD_HANDLE, Cur);
}

void getxy(int* x, int* y)
{
	CONSOLE_SCREEN_BUFFER_INFO Buf;

	GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &Buf);
	*x = (int)Buf.dwCursorPosition.X;
	*y = (int)Buf.dwCursorPosition.Y;

}

void clrscr(void)
{
	COORD Cur = { 0, 0 };
	unsigned long dwLen;

	FillConsoleOutputCharacter(STD_HANDLE, ' ', 80 * 25, Cur, &dwLen);
}

/*---------------------------------------------------------*/

void admin_main() {
	system("cls");
	print_screen("admin_main.pas");
	gotoxy(19, 10);

	char ad_pd[10];
	gets(ad_pd);

	if (ad_pd[0] == '1')
	{
		Insert_tuple();
	}
	else if (ad_pd[0] == '2')
	{
		delete_tuple();
	}
	else if (ad_pd[0] == '3')
	{
		select_tuple();
	}
}

void select_tuple()
{

	/* --------------------------------------------------------------------------
	Retrieve the current maximum employee number
 -------------------------------------------------------------------------- */
	EXEC SQL BEGIN DECLARE SECTION;
	int v_c_seq;
	varchar v_payment_time[11];
	varchar v_p_code[11];
	varchar v_p_name[21];
	int v_p_price;
	varchar v_p_date[11];
	int v_c_total;
	// int v_total; //총매출
	varchar v_total[100];

	char dynstmt[1000];

	EXEC SQL END DECLARE SECTION;

	int x, y, count = 0, i;


	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

	system("cls");
	/* 사용자 입력 */
	clrscr();

	print_screen("admin_trade.pas");

	/* 거래내역*/
	sprintf(dynstmt, "SELECT * FROM counter order by c_seq");

	EXEC SQL PREPARE S5 FROM : dynstmt;

	/* cursor 선언 */
	EXEC SQL DECLARE c_cursor5 CURSOR FOR S5;

	/* cursor open */
	EXEC SQL OPEN c_cursor5;

	EXEC SQL WHENEVER NOT FOUND DO break;

	x = 7;
	y = 8;

	for (;;)
	{
		EXEC SQL FETCH c_cursor5 INTO : v_c_seq, : v_payment_time, : v_p_code, : v_p_name, : v_p_price, : v_p_date, : v_c_total;

		v_payment_time.arr[v_payment_time.len] = '\0';
		v_p_code.arr[v_p_code.len] = '\0';
		v_p_name.arr[v_p_name.len] = '\0';
		v_p_date.arr[v_p_date.len] = '\0';

		gotoxy(x, y);
		printf("%8d  %-9s %-9s %-9s %6d  %-9s %4d", v_c_seq, v_payment_time.arr, v_p_code.arr, v_p_name.arr, v_p_price, v_p_date.arr, v_c_total);
		y++;
	}

	/* Close the cursor. */

	EXEC SQL CLOSE c_cursor5;



	/*총매출*/
	sprintf(dynstmt, "select sum(p_price) from counter");

	EXEC SQL PREPARE T FROM : dynstmt;

	EXEC SQL DECLARE c_tcursor CURSOR FOR T;

	EXEC SQL OPEN c_tcursor;

	int sum = 0;
	EXEC SQL WHENEVER NOT FOUND DO break;
	for (;;) {
		EXEC SQL FETCH c_tcursor INTO : v_total;
		sum = atoi(v_total.arr);
		v_total.arr[v_total.len] = '\0';
	}

	EXEC SQL CLOSE c_tcursor;
	gotoxy(19, 20);
	printf("%d", sum);



	EXEC SQL COMMIT;

	getch();
}

void Insert_tuple()
{
	EXEC SQL BEGIN DECLARE SECTION;
	char dynstmt[1000];
	EXEC SQL END DECLARE SECTION;

	char v_code[20];
	char v_name[20];
	char v_date[20];
	char v_category[20];
	char v_price[20];
	char v_brand[20];
	char v_total[20];
	char n[10];


	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
	system("cls");
	clrscr();

	print_screen("product_add.pas");

	gotoxy(20, 3); gets(v_code);
	gotoxy(20, 4); gets(v_name);
	gotoxy(20, 5); gets(v_date);
	gotoxy(20, 6); gets(v_category);
	gotoxy(20, 7); gets(v_price);
	gotoxy(20, 8); gets(v_brand);
	gotoxy(20, 9); gets(v_total);


	sprintf(dynstmt, "insert into product values ( '%s', '%s',  TO_DATE('%s','YY-MM-DD'), '%s', %s, '%s', %s)", v_code, v_name, v_date, v_category, v_price, v_brand, v_total);
	gotoxy(20, 16);
	gets(n);

	if (n[0] == '1') {

		while (1) {
			EXEC SQL EXECUTE IMMEDIATE : dynstmt;
			break;
		}
		EXEC SQL COMMIT WORK;
	}
	else {
		gotoxy(28, 16);
		printf("물품 등록 취소");
	}
}

void delete_tuple()
{
	EXEC SQL BEGIN DECLARE SECTION;
	char dynstmt[1000];
	EXEC SQL END DECLARE SECTION;

	char v_code[20];
	char v_name[20];
	char v_date[20];
	char v_category[20];
	char v_price[20];
	char v_brand[20];
	char v_total[20];
	char n[10];


	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
	system("cls");
	clrscr();

	print_screen("product_del.pas");

	gotoxy(20, 3); gets(v_code);
	gotoxy(20, 4); gets(v_name);

	gotoxy(20, 11);
	gets(n);

	if (n[0] == '1') {
		gotoxy(20, 13);
		printf("상품이 제거되었습니다.");
		
			sprintf(dynstmt, "delete from product where p_code='%s' and p_name ='%s'", v_code, v_name);
		while (1) {
			EXEC SQL EXECUTE IMMEDIATE : dynstmt;
		break;
		}
		EXEC SQL COMMIT WORK;
	}

	getch();
}

void percel_main() {
	system("cls"); clrscr(); print_screen("percel_main.pas");
	gotoxy(8, 2);
	char go_info[10];
	gets(go_info);
	if (go_info[0] == '1') {
		percel_info();
	}
	else {
		getch();
	}
}

void percel_info()
{
	EXEC SQL BEGIN DECLARE SECTION;

	char dynstmt[1000];

	EXEC SQL END DECLARE SECTION;

	char p_type[100];
	char send_n[100];
	char send_tel[100];
	char rev_n[100];
	char rev_tel[100];
	char rev_add[100];
	char preorde[100];



	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
	system("cls"); clrscr(); print_screen("percel_info.pas");
	/* 데이터 입력 */
	gotoxy(26, 4); // 종류
	gets(p_type);

	gotoxy(24, 12); // 송화인 명
	gets(send_n);

	gotoxy(24, 13); // 송화인 번호
	gets(send_tel);

	gotoxy(24, 19); // 수화인 명
	gets(rev_n);

	gotoxy(24, 20); // 수화인 번호
	gets(rev_tel);

	gotoxy(24, 21); // 수화인 주소
	gets(rev_add);

	gotoxy(39, 24); // 선불,후불
	gets(preorde);

	gotoxy(40, 26);  // 진행,취소
	char check_pr[10];
	gets(check_pr);

	if (check_pr[0] == '1') {

		// 택배 입력 정보 percel로 삽입

		sprintf(dynstmt, "insert into percel values (per_seq.nextval,'%s', '%s', '%s', '%s', '%s', '%s','%s')", p_type, send_n, send_tel, rev_n, rev_tel, rev_add, preorde);

		while (1) {
			EXEC SQL EXECUTE IMMEDIATE : dynstmt;
			break;
		}
		EXEC SQL COMMIT WORK;

		EXEC SQL COMMIT WORK;

		percel_check();
	}
	else {
		getch();
	}

}

void percel_check() {

	system("cls");
	clrscr(); print_screen("percel_check.pas");
	EXEC SQL BEGIN DECLARE SECTION;
	char dynstmt[1000];
	varchar preorde[100];
	varchar p_type[100];
	varchar rev_add[100];
	EXEC SQL END DECLARE SECTION;

	char go_print[10];

	sprintf(dynstmt, "select case when preorde='1' then '선불' when preorde='2' then '후불' end as preorde,case when p_type= '1' then '의류' when p_type= '2' then '가전제품류' when p_type='3' then '식품류' when p_type= '4' then '잡화' else '기타' end p_type,rev_add from percel where per_seq in (select max(per_seq) from percel)");

	EXEC SQL PREPARE check_per FROM : dynstmt;
	EXEC SQL DECLARE ck_cursor CURSOR FOR check_per;
	EXEC SQL OPEN ck_cursor;
	EXEC SQL WHENEVER NOT FOUND DO break;

	int x = 21;
	int y = 4;
	for (;;) //송장 확인내역 출력
	{
		EXEC SQL FETCH ck_cursor INTO : preorde, : p_type, : rev_add;

		preorde.arr[preorde.len] = '\0';
		p_type.arr[p_type.len] = '\0';
		rev_add.arr[rev_add.len] = '\0';

		gotoxy(x, y); printf("%s", preorde.arr);
		y = y + 5;
		gotoxy(x, y); printf("%s", p_type.arr);
		x = x + 5;
		y = y + 1;
		gotoxy(x, y); printf("%s", rev_add.arr);

		gotoxy(42, 4); printf("3000원");

	}
	/* Close the cursor. */
	EXEC SQL CLOSE ck_cursor;
	EXEC SQL COMMIT;

	gets(go_print);
	if (go_print[0] == '0' || go_print[0] == '\0') {
		percel_print();
	}
}

void percel_print() {
	system("cls");
	clrscr(); print_screen("percel_print.pas");
	EXEC SQL BEGIN DECLARE SECTION;
	char dynstmt[1000];
	varchar preorde[100];
	varchar p_type[100];
	varchar send_n[100];
	varchar send_tel[100];
	varchar rev_n[100];
	varchar rev_tel[100];
	varchar rev_add[100];
	EXEC SQL END DECLARE SECTION;



	sprintf(dynstmt, "select case when preorde='1' then '선불' when preorde='2' then '후불' end as preorde,case when p_type='1' then '의류' when p_type='2' then '가전제품류' when p_type='3' then '식품류' when p_type='4' then '잡화' when p_type='5' then '기타' end as p_type,send_n,send_tel,rev_n,rev_tel,rev_add from percel where per_seq in (select max(per_seq) from percel)");

	EXEC SQL PREPARE print_per FROM : dynstmt;
	EXEC SQL DECLARE prt_cursor CURSOR FOR print_per;
	EXEC SQL OPEN prt_cursor;
	EXEC SQL WHENEVER NOT FOUND DO break;

	int x = 3;
	int y = 15;
	for (;;) //운송장출력
	{
		EXEC SQL FETCH prt_cursor INTO : preorde, : p_type, : send_n, : send_tel, : rev_n, : rev_tel, : rev_add;

		preorde.arr[preorde.len] = '\0';
		p_type.arr[p_type.len] = '\0';
		send_n.arr[send_n.len] = '\0';
		send_tel.arr[send_tel.len] = '\0';
		rev_n.arr[rev_tel.len] = '\0';
		rev_tel.arr[rev_tel.len] = '\0';
		rev_add.arr[rev_add.len] = '\0';

		gotoxy(x, y); printf("%s", send_n.arr);
		x = x + 11;
		gotoxy(x, y); printf("%s", rev_n.arr);
		x = x + 8;
		gotoxy(x, y); printf("%s", rev_tel.arr);
		x = x + 15;
		gotoxy(x, y); printf("%s", rev_add.arr);
		y = y + 7;
		x = x - 34;
		gotoxy(x, y); printf("%s", rev_add.arr);
		x = x + 39;
		gotoxy(x, y); printf("%s", preorde.arr);

		gotoxy(24, 22); printf("3000원");

	}
	/* Close the cursor. */
	EXEC SQL CLOSE prt_cursor;
	EXEC SQL COMMIT;
	// 배송 일자 출력:start//////////
	gotoxy(24, 7);
	time_t timer;
	struct tm* t;
	timer = time(NULL);
	t = localtime(&timer);



	int M = t->tm_mon + 1;
	int D = t->tm_mday;

	printf("%d/%d", M, D);
	// 배송 일자 출력:end//////////
	getch();
}